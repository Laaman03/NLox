// Autogenerated
using System;
using System.Collections.Generic;

namespace NLox.Lib
{
    public abstract class Expr
    {
        public abstract R Accept<R>(IExprVisitor<R> visitor);
    }

    public class Binary : Expr
    {
        public Expr Left { get; private init; }
        public Token Op { get; private init; }
        public Expr Right { get; private init; }
        public override R Accept<R>(IExprVisitor<R> visitor) => visitor.VisitBinaryExpr(this);
        public Binary(Expr left, Token op, Expr right)
        {
            Left = left;
            Op = op;
            Right = right;
        }
    }
    public class Grouping : Expr
    {
        public Expr Expression { get; private init; }
        public override R Accept<R>(IExprVisitor<R> visitor) => visitor.VisitGroupingExpr(this);
        public Grouping(Expr expression)
        {
            Expression = expression;
        }
    }
    public class Literal : Expr
    {
        public object Value { get; private init; }
        public override R Accept<R>(IExprVisitor<R> visitor) => visitor.VisitLiteralExpr(this);
        public Literal(object value)
        {
            Value = value;
        }
    }
    public class Unary : Expr
    {
        public Token Op { get; private init; }
        public Expr Right { get; private init; }
        public override R Accept<R>(IExprVisitor<R> visitor) => visitor.VisitUnaryExpr(this);
        public Unary(Token op, Expr right)
        {
            Op = op;
            Right = right;
        }
    }

    public interface IExprVisitor<R>
    {
        R VisitBinaryExpr(Binary expr);
        R VisitGroupingExpr(Grouping expr);
        R VisitLiteralExpr(Literal expr);
        R VisitUnaryExpr(Unary expr);
    }
}
